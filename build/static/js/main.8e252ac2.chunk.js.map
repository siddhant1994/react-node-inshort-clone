{"version":3,"sources":["Cards.js","config.js","App.js","serviceWorker.js","index.js"],"names":["Cards","article","title","time","author","content","date","image","read_more","className","style","backgroundImage","textDecoration","clas","target","href","config","App","useState","articles","setArticles","useEffect","window","fetch","base_url","then","response","json","catch","e","console","log","map","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PA4DeA,MA1Df,YAEI,IAAD,IADCC,QAAWC,EACZ,EADYA,MAAOC,EACnB,EADmBA,KAAMC,EACzB,EADyBA,OAAQC,EACjC,EADiCA,QAASC,EAC1C,EAD0CA,KAAMC,EAChD,EADgDA,MAAOC,EACvD,EADuDA,UAEtD,OACI,yBAAKC,UAAU,IACX,yBAAKA,UAAU,uBACX,yBACIA,UAAU,kBACVC,MAAO,CACHC,gBAAiBJ,KAGzB,yBAAKE,UAAU,kCACX,uBACIA,UAAU,YACVC,MAAO,CAAEE,eAAgB,cAEzB,8BAAOV,IAEX,yBAAKO,UAAU,wDACX,2BACI,0BAAMA,UAAU,SAAhB,UAFR,MAIO,0BAAMA,UAAU,UAAUL,GAJjC,KAKI,0BAAMK,UAAU,QAAQN,GAL5B,MAMO,0BAAMU,KAAK,QAAQP,KAG9B,yBAAKG,UAAU,oCACX,6BAAMJ,GACN,yBAAKI,UAAU,0DACX,2BACI,0BAAMA,UAAU,SAAhB,UAFR,MAIO,0BAAMA,UAAU,UAAUL,GAJjC,KAKI,0BACIK,UAAU,OACVJ,QAAQ,4BAEPF,GATT,MAWO,0BAAMM,UAAU,QAAQH,KAInC,yBAAKG,UAAU,mCACX,yBAAKA,UAAU,aAAf,YAEI,uBAAGA,UAAU,SAASK,OAAO,SAASC,KAAMP,GAA5C,aClDlBQ,EAAS,CAIXA,SAAA,KAEWA,ICgBAC,MAlBf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,KASX,OAPAC,qBAAU,WACNC,OACKC,MADL,UACcP,EAAOQ,SADrB,WAEKC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACN,GAAD,OAAcC,EAAYD,MAC/BS,OAAM,SAACC,GAAD,OAAOC,QAAQC,IAAIF,QAC/B,IAEC,yBAAKpB,UAAU,OACVU,EAASa,KAAI,SAAC/B,EAASgC,GACpB,OAAO,kBAAC,EAAD,CAAOhC,QAASA,EAASiC,IAAKD,SCJjCE,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.8e252ac2.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Cards({\n    article: { title, time, author, content, date, image, read_more },\n}) {\n    return (\n        <div className=\"\">\n            <div className=\"news-card z-depth-1\">\n                <div\n                    className=\"news-card-image\"\n                    style={{\n                        backgroundImage: image,\n                    }}\n                ></div>\n                <div className=\"news-card-title news-right-box\">\n                    <a\n                        className=\"clickable\"\n                        style={{ textDecoration: \"underline\" }}\n                    >\n                        <span>{title}</span>\n                    </a>\n                    <div className=\"news-card-author-time news-card-author-time-in-title\">\n                        <a>\n                            <span className=\"short\">short</span>\n                        </a>\n                        by <span className=\"author\">{author}</span> /\n                        <span className=\"time\">{time}</span>\n                        on <span clas=\"date\">{date}</span>\n                    </div>\n                </div>\n                <div className=\"news-card-content news-right-box\">\n                    <div>{content}</div>\n                    <div className=\"news-card-author-time news-card-author-time-in-content\">\n                        <a>\n                            <span className=\"short\">short</span>\n                        </a>\n                        by <span className=\"author\">{author}</span> /\n                        <span\n                            className=\"time\"\n                            content=\"2020-10-06T12:11:23.000Z\"\n                        >\n                            {time}\n                        </span>\n                        on <span className=\"date\">{date}</span>\n                    </div>\n                </div>\n\n                <div className=\"news-card-footer news-right-box\">\n                    <div className=\"read-more\">\n                        read more\n                        <a className=\"source\" target=\"_blank\" href={read_more}>\n                            HERE\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Cards;\n","const config = {};\nif (process.env.NODE_ENV === \"development\") {\n    config.base_url = `http://localhost:8081/`;\n} else {\n    config.base_url = `/`;\n}\nexport default config;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Cards\";\nimport config from \"./config\";\nfunction App() {\n    const [articles, setArticles] = useState([]);\n    useEffect(() => {\n        window\n            .fetch(`${config.base_url}scrape`)\n            .then((response) => response.json())\n            .then((articles) => setArticles(articles))\n            .catch((e) => console.log(e));\n    }, []);\n    return (\n        <div className=\"App\">\n            {articles.map((article, index) => {\n                return <Cards article={article} key={index} />;\n            })}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}